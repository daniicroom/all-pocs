// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pruebaEntity.Repository;

namespace pruebaEntity.Migrations
{
    [DbContext(typeof(PersonDbContext))]
    [Migration("20220120043816_AddAuthentication")]
    partial class AddAuthentication
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("pruebaEntity.Repository.Models.Aspnetrole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("aspnetroles");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Cod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cod");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Encuesta", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("IdPregunta")
                        .HasColumnType("int")
                        .HasColumnName("id_pregunta");

                    b.Property<int?>("IdSistemaProductivo")
                        .HasColumnType("int")
                        .HasColumnName("id_sistema_productivo");

                    b.Property<int?>("IdTipoRespuesta")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_respuesta");

                    b.Property<string>("RespuestaManual")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("respuesta_manual");

                    b.HasKey("Id");

                    b.HasIndex("IdPregunta");

                    b.HasIndex("IdTipoRespuesta");

                    b.ToTable("encuestas");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Input", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AreaCrop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CropProductionCosts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CropYield")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("FinagroCcredit")
                        .HasColumnType("smallint");

                    b.Property<string>("FinalSowingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialSowingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("PlantsByHectare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductiveSystemId")
                        .HasColumnType("int");

                    b.Property<string>("SidewalkId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("input");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Inssuingquotation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InputId")
                        .HasColumnType("int");

                    b.Property<short?>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("SesionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserAppId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("InputId");

                    b.HasIndex("UserAppId");

                    b.ToTable("inssuingquotations");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Ts")
                        .HasColumnType("datetime")
                        .HasColumnName("_ts");

                    b.HasKey("Id");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Modeloutput", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MensajeError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MostrarEnPantalla")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PosicionValor")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("modeloutputs");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Cod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cod");

                    b.Property<string>("IdDepartamentoId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("id_departamento_id");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("municipios");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("TextoPregunta")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("texto_pregunta");

                    b.HasKey("Id");

                    b.ToTable("preguntas");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("InputId")
                        .HasColumnType("int");

                    b.Property<short?>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputId");

                    b.ToTable("quote");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Respuesta", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Respuesta1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("respuesta");

                    b.Property<int?>("TipoRespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_respuesta_id");

                    b.HasKey("Id");

                    b.HasIndex("TipoRespuestaId");

                    b.ToTable("respuestas");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.RoleApp", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__roleApp__AF2760AD7FAE5194");

                    b.ToTable("roleApp");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Sheet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DataId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionBook")
                        .HasColumnType("int");

                    b.Property<int?>("PositionValue")
                        .HasColumnType("int");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Visibility")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("sheets");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.SubtiposCultivo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Cod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cod");

                    b.Property<int?>("Habilitado")
                        .HasColumnType("int")
                        .HasColumnName("habilitado");

                    b.Property<int?>("IdTipoCultivo")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_cultivo");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoCultivo");

                    b.ToTable("subtipos_cultivos");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.TipoRespuesta", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("tipo_respuestas");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.TiposCultivo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte?>("Habilitado")
                        .HasColumnType("tinyint")
                        .HasColumnName("habilitado");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("tiposCultivos");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Userapp", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<short?>("EmailConfirmed")
                        .HasColumnType("smallint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("IsEnabled")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("LockoutEnabled")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("PhoneNumberConfirmed")
                        .HasColumnType("smallint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TwoFactorEnabled")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("userapp");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Userappbook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("UserAppId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "UserAppId")
                        .HasName("PK__userappb__298AF2937FD84470");

                    b.HasIndex("UserAppId");

                    b.ToTable("userappbooks");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Vereda", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Cod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cod");

                    b.Property<string>("IdMuncipioId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("id_muncipio_id");

                    b.Property<string>("Latitud")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("latitud");

                    b.Property<string>("Logitud")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("logitud");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("veredas");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Encuesta", b =>
                {
                    b.HasOne("pruebaEntity.Repository.Models.Pregunta", "IdPreguntaNavigation")
                        .WithMany("Encuesta")
                        .HasForeignKey("IdPregunta")
                        .HasConstraintName("FK__encuestas__id_pr__6754599E");

                    b.HasOne("pruebaEntity.Repository.Models.TipoRespuesta", "IdTipoRespuestaNavigation")
                        .WithMany("Encuesta")
                        .HasForeignKey("IdTipoRespuesta")
                        .HasConstraintName("FK__encuestas__id_ti__68487DD7");

                    b.Navigation("IdPreguntaNavigation");

                    b.Navigation("IdTipoRespuestaNavigation");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Inssuingquotation", b =>
                {
                    b.HasOne("pruebaEntity.Repository.Models.Book", "Book")
                        .WithMany("Inssuingquotations")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__inssuingq__BookI__5AEE82B9");

                    b.HasOne("pruebaEntity.Repository.Models.Input", "Input")
                        .WithMany("Inssuingquotations")
                        .HasForeignKey("InputId")
                        .HasConstraintName("FK__inssuingq__Input__59FA5E80");

                    b.HasOne("pruebaEntity.Repository.Models.Userapp", "UserApp")
                        .WithMany("Inssuingquotations")
                        .HasForeignKey("UserAppId")
                        .HasConstraintName("FK__inssuingq__UserA__5812160E");

                    b.Navigation("Book");

                    b.Navigation("Input");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Quote", b =>
                {
                    b.HasOne("pruebaEntity.Repository.Models.Input", "Input")
                        .WithMany("Quotes")
                        .HasForeignKey("InputId")
                        .HasConstraintName("FK__quote__InputId__5DCAEF64");

                    b.Navigation("Input");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Respuesta", b =>
                {
                    b.HasOne("pruebaEntity.Repository.Models.TipoRespuesta", "TipoRespuesta")
                        .WithMany("Respuesta")
                        .HasForeignKey("TipoRespuestaId")
                        .HasConstraintName("FK__respuesta__tipo___5EBF139D");

                    b.Navigation("TipoRespuesta");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.RoleApp", b =>
                {
                    b.HasOne("pruebaEntity.Repository.Models.Userapp", "User")
                        .WithMany("RoleApps")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__roleApp__UserId__5FB337D6")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Sheet", b =>
                {
                    b.HasOne("pruebaEntity.Repository.Models.Book", "Book")
                        .WithMany("Sheets")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__sheets__BookId__619B8048");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.SubtiposCultivo", b =>
                {
                    b.HasOne("pruebaEntity.Repository.Models.TiposCultivo", "IdTipoCultivoNavigation")
                        .WithMany("SubtiposCultivos")
                        .HasForeignKey("IdTipoCultivo")
                        .HasConstraintName("FK__subtipos___id_ti__628FA481");

                    b.Navigation("IdTipoCultivoNavigation");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Userappbook", b =>
                {
                    b.HasOne("pruebaEntity.Repository.Models.Book", "Book")
                        .WithMany("Userappbooks")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__userappbo__BookI__66603565")
                        .IsRequired();

                    b.HasOne("pruebaEntity.Repository.Models.Userapp", "UserApp")
                        .WithMany("Userappbooks")
                        .HasForeignKey("UserAppId")
                        .HasConstraintName("FK__userappbo__UserA__656C112C")
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Book", b =>
                {
                    b.Navigation("Inssuingquotations");

                    b.Navigation("Sheets");

                    b.Navigation("Userappbooks");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Input", b =>
                {
                    b.Navigation("Inssuingquotations");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Pregunta", b =>
                {
                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.TipoRespuesta", b =>
                {
                    b.Navigation("Encuesta");

                    b.Navigation("Respuesta");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.TiposCultivo", b =>
                {
                    b.Navigation("SubtiposCultivos");
                });

            modelBuilder.Entity("pruebaEntity.Repository.Models.Userapp", b =>
                {
                    b.Navigation("Inssuingquotations");

                    b.Navigation("RoleApps");

                    b.Navigation("Userappbooks");
                });
#pragma warning restore 612, 618
        }
    }
}
